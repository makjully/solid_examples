Идея: "зависеть нужно от абстракций, а не от чего-то конкретного" (Боб Мартин).

Цель: применяя этот принцип, одни модули можно легко заменять другими, всего лишь меняя модуль зависимости, и тогда
никакие перемены в низкоуровневом модуле не повлияют на высокоуровневый.

Пример: Класс Message, представляющий некое сообщение миру, использует для печати класс ConsolePrinter. При подобном
определении класс Message зависит от класса ConsolePrinter. Более того мы жестко определили, что печать можно только на
консоли с помощью класса ConsolePrinter. Другие же варианты, например, вывод на принтер, вывод в файл или с
использованием каких-то элементов графического интерфейса - все это в данном случае исключено. Абстракция печати
сообщения не отделена от деталей класса ConsolePrinter. Все это является нарушением принципа инверсии зависимостей.

Решение: "правильный" вариант использует принцип инверсии зависимостей, отделив абстракции от низкоуровневой реализации.
Теперь абстракция печати сообщения отделена от конкретных реализаций. В итоге и класс Message и класс ConsolePrinter
зависят от абстракции Printer. Кроме того, теперь мы можем создать дополнительные низкоуровневые реализации абстракции
Printer и динамически применять их в программе.