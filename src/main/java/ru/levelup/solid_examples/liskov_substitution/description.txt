Идея: Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.

Цель: классы-наследники могли бы использоваться вместо родительских классов, от которых они образованы, не нарушая
работу программы. Если оказывается, что в коде проверяется тип класса, значит принцип подстановки нарушается.

Задача: напишем функцию, которая выводит количество конечностей животного.

В "плохом" примере код должен знать о типах всех обрабатываемых им объектов и, в зависимости от типа, обращаться к
соответствующей функции для вывода информации о конечностях конкретного животного. Как результат, при создании нового
типа животного функцию придётся переписывать.
В "правильном" примере код переписан согласно требованиям, сформулированным Стивом Фентоном. Они заключаются в том, что
методы, принимающие или возвращающие значения с типом некоего суперкласса (Animal в нашем случае) должны также принимать
и возвращать значения, типами которых являются его подклассы (Lion, Penguin, Snake). Теперь методу animalsLegCount не
нужно знать о том, объект какого именно подкласса класса Animal она обрабатывает для того, чтобы узнать сведения о
количестве конечностей у животного, представленного этим объектом. Функция просто вызывает метод legCount класса Animal,
так как подклассы этого класса должны реализовывать этот метод для того, чтобы их можно было бы использовать вместо
него, не нарушая правильность работы программы.